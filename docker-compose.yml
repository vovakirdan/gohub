version: '3.8'

services:
  # ---- PostgreSQL ----
  db:
    build:
      context: ./deploy/postgres
      dockerfile: Dockerfile
    container_name: gohub_postgres
    environment:
      POSTGRES_USER: gohub
      POSTGRES_PASSWORD: gohub
      POSTGRES_DB: gohub
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/postgres/initdb:/docker-entrypoint-initdb.d
    restart: unless-stopped

  # ---- Postgres Exporter ----
  db_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: gohub_db_exporter
    depends_on:
      - db
    environment:
      # строка подключения к базе
      DATA_SOURCE_NAME: postgres://gohub:gohub@db:5432/gohub?sslmode=disable
    ports:
      - "9187:9187"
    restart: unless-stopped
    
  # ---- gRPC Go Server ----
  server:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: gohub_server
    depends_on:
      - db
    environment:
      # DSN для подключения к контейнеру db (hostname = "db")
      DATABASE_URL: postgres://gohub:gohub@db:5432/gohub?sslmode=disable
    ports:
      - "50051:50051"  # gRPC
      - "8080:8080"    # HTTP/WebSocket
      - "2112:2112"    # Port for Prometheus metrics
    restart: unless-stopped

  # ---- Prometheus ----
  prometheus:
    image: prom/prometheus:latest
    container_name: gohub_prometheus
    depends_on:
      - server
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    restart: unless-stopped

  # ---- React ----
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: gohub_web
    depends_on:
      - server
    environment:
      # REACT_APP_WS_URL укажем на "server:8080/ws" - сетевое имя gRPC-сервера
      REACT_APP_WS_URL: ws://server:8080/ws
    ports:
      - "3000:80"
    restart: unless-stopped

volumes:
  postgres_data:
